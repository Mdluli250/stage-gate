generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth models for NextAuth Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(MEMBER)
  accounts      Account[]
  sessions      Session[]
  projectsOwned Project[] @relation("ProjectOwner")
  projects      ProjectMember[]
  notifications Notification[] @relation("UserNotifications")
  messages      Message[]
  comments      Comment[]
  activityLogs  ActivityLog[]
  reviews       Review[]  @relation("ReviewUser")
  gatekeptGates Gate[]    @relation("GateGatekeeper")
  uploadedDocs  Document[] @relation("DocumentUploadedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  OWNER
  GATEKEEPER
  MEMBER
}

// Stage-Gate domain models
model Project {
  id            String          @id @default(cuid())
  name          String
  description   String
  ownerId       String
  owner         User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  stages        Stage[]
  members       ProjectMember[]
  messages      Message[]
  comments      Comment[]
  redFlags      RedFlag[]
  reviews       Review[]
  notifications Notification[]
  documents     Document[]
  activityLogs  ActivityLog[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Stage {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String
  order       Int
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  gates       Gate[]
}

model Gate {
  id            String   @id @default(cuid())
  stageId       String
  name          String
  description   String
  gatekeeperId  String?
  decision      GateDecision @default(PENDING)
  decidedAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stage         Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  gatekeeper    User?    @relation("GateGatekeeper", fields: [gatekeeperId], references: [id])
  reviews       Review[]
}

enum GateDecision {
  PENDING
  APPROVED
  REJECTED
  REVISE
}

model Review {
  id        String   @id @default(cuid())
  projectId String
  gateId    String
  userId    String
  comment   String
  decision  GateDecision
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  gate      Gate     @relation(fields: [gateId], references: [id], onDelete: Cascade)
  user      User     @relation("ReviewUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  projectId String
  senderId  String
  // nullable if broadcast to project; set if direct or group
  recipientId String?
  content   String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  content   String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model RedFlag {
  id        String   @id @default(cuid())
  projectId String
  title     String
  severity  Int
  status    String   @default("open")
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  projectId String?
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id            String   @id @default(cuid())
  projectId     String
  name          String
  sharepointId  String
  sharepointUrl String
  version       Int      @default(1)
  uploadedById  String
  uploadedAt    DateTime @default(now())
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy    User     @relation("DocumentUploadedBy", fields: [uploadedById], references: [id])
}

model ActivityLog {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  action    String
  meta      Json?
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}
